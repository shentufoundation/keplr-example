syntax = "proto3";
package shentu.bounty.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "cosmos/base/query/v1beta1/pagination.proto";

import "shentu/bounty/v1/bounty.proto";

option go_package = "github.com/shentufoundation/shentu/x/bounty/types";

// Query defines the gRPC querier service for bounty module
service Query {
  // Programs queries all programs based on given status.
  rpc Programs(QueryProgramsRequest) returns (QueryProgramsResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/programs";
  }

  // Program queries program details based on ProgramId.
  rpc Program(QueryProgramRequest) returns (QueryProgramResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/programs/{program_id}";
  }

  // Findings queries findings of a given program.
  rpc Findings(QueryFindingsRequest) returns (QueryFindingsResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/findings";
  }

  // Finding queries Finding information based on programID, FindingId.
  rpc Finding(QueryFindingRequest) returns (QueryFindingResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/findings/{finding_id}";
  }

  // FindingFingerprint queries finding fingerprint based on findingId.
  rpc FindingFingerprint(QueryFindingFingerprintRequest) returns (QueryFindingFingerprintResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/findings/{finding_id}/fingerprint";
  }

  // ProgramFingerprint queries program fingerprint based on programId.
  rpc ProgramFingerprint(QueryProgramFingerprintRequest) returns (QueryProgramFingerprintResponse) {
    option (google.api.http).get = "/shentu/bounty/v1/programs/{program_id}/fingerprint";
  }
}

// QueryHostsRequest is the request type for the Query/Hosts RPC method.
message QueryHostsRequest {}

// QueryHostsResponse is the response type for the Query/Hosts RPC method.
message QueryHostsResponse {}

// QueryHostRequest is the request type for the Query/Host RPC method.
message QueryHostRequest {
  // host_addr defines the host address to query for.
  string host_addr = 1;
}

// QueryHostResponse is the response type for the Query/Host RPC method.
message QueryHostResponse {}

// QueryProgramsRequest is the request type for the Query/Programs RPC method.
message QueryProgramsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryProgramsResponse is the response type for the Query/Programs RPC method.
message QueryProgramsResponse {
  repeated Program programs = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryProgramRequest is the request type for the Query/Program RPC method.
message QueryProgramRequest {
  // program_id defines the unique id of the bounty program.
  string program_id = 1;
}

// QueryProgramResponse is the response type for the Query/Program RPC method.
message QueryProgramResponse {
  Program program = 1 [(gogoproto.nullable) = false];
}

// QueryFindingRequests is the request type for the Query/Findings RPC method.
message QueryFindingsRequest {
  // program_id defines the unique id of the program.
  string program_id = 1;

  // submitter_address defines the find address for the finding.
  string submitter_address = 2;

  // pagination defines the pagination in the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryFindingsResponse is the response type for the Query/Findings RPC method.
message QueryFindingsResponse {
  repeated Finding findings = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFindingRequest is the request type for the Query/Finding RPC method.
message QueryFindingRequest {
  // finding_id defines the unique id of the finding.
  string finding_id = 1;
}

// QueryFindingResponse is the response type for the Query/Finding RPC method.
message QueryFindingResponse {
  Finding finding = 1 [(gogoproto.nullable) = false];
}

// QueryFindingFingerPrint is the request type for the Query/Finding RPC method.
message QueryFindingFingerprintRequest {
  // finding_id defines the unique id of the finding.
  string finding_id = 1;
}

// QueryFindingFingerPrintResponse is the response type for the Query/Finding RPC method.
message QueryFindingFingerprintResponse {
  string fingerprint = 1;
}

// QueryProgramFingerprintRequest is the request type for the Query/Finding RPC method.
message QueryProgramFingerprintRequest {
  // program_id defines the unique id of the finding.
  string program_id = 1;
}

// QueryProgramFingerprintResponse is the response type for the Query/Finding RPC method.
message QueryProgramFingerprintResponse {
  string fingerprint = 1;
}