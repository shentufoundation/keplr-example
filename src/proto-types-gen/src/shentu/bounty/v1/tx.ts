// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: shentu/bounty/v1/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { SeverityLevel, severityLevelFromJSON, severityLevelToJSON } from "./bounty";

export const protobufPackage = "shentu.bounty.v1";

/** MsgCreateProgram defines a SDK message for creating a new program. */
export interface MsgCreateProgram {
  programId: string;
  name: string;
  detail: string;
  operatorAddress: string;
}

/** MsgEditProgram defines a SDK message for editing a program. */
export interface MsgEditProgram {
  programId: string;
  name: string;
  detail: string;
  operatorAddress: string;
}

/** MsgCreateProgramResponse defines the Msg/CreateProgram response type. */
export interface MsgCreateProgramResponse {
}

/** MsgModifyProgramResponse defines the Msg/ModifyProgram response type. */
export interface MsgEditProgramResponse {
}

export interface MsgActivateProgram {
  programId: string;
  operatorAddress: string;
}

export interface MsgActivateProgramResponse {
}

export interface MsgCloseProgram {
  programId: string;
  operatorAddress: string;
}

export interface MsgCloseProgramResponse {
}

/** MsgSubmitFinding defines a message to submit a finding. */
export interface MsgSubmitFinding {
  programId: string;
  findingId: string;
  findingHash: string;
  operatorAddress: string;
  severityLevel: SeverityLevel;
}

/** MsgSubmitFindingResponse defines the MsgSubmitFinding response type. */
export interface MsgSubmitFindingResponse {
}

/** MsgEditFinding defines a message to edit a finding. */
export interface MsgEditFinding {
  findingId: string;
  findingHash: string;
  operatorAddress: string;
  severityLevel: SeverityLevel;
  paymentHash: string;
}

/** MsgEditFindingResponse defines the MsgEditFinding response type. */
export interface MsgEditFindingResponse {
}

/** MsgConfirmFinding defines a message to confirm a finding to an existing finding. */
export interface MsgConfirmFinding {
  findingId: string;
  operatorAddress: string;
  fingerprint: string;
}

/** MsgConfirmFindingResponse defines the Msg/AcceptFinding response type. */
export interface MsgConfirmFindingResponse {
}

/** MsgActivateFinding defines a message to activate a finding to an existing finding. */
export interface MsgActivateFinding {
  findingId: string;
  operatorAddress: string;
}

/** MsgActivateFindingResponse defines the Msg/AcceptFinding response type. */
export interface MsgActivateFindingResponse {
}

/** MsgConfirmFindingPaid defines a message to close a finding to an existing finding. */
export interface MsgConfirmFindingPaid {
  findingId: string;
  operatorAddress: string;
}

/** MsgCloseFindingResponse defines the Msg/CloseFinding response type. */
export interface MsgConfirmFindingPaidResponse {
}

/** MsgCloseFinding defines a message to close a finding to an existing finding. */
export interface MsgCloseFinding {
  findingId: string;
  operatorAddress: string;
}

/** MsgCloseFindingResponse defines the Msg/CloseFinding response type. */
export interface MsgCloseFindingResponse {
}

/** MsgPublishFinding defines a message to publish a finding. */
export interface MsgPublishFinding {
  findingId: string;
  title: string;
  detail: string;
  description: string;
  proofOfConcept: string;
  operatorAddress: string;
}

/** MsgPublishFindingResponse defines the MsgPublishFinding response type. */
export interface MsgPublishFindingResponse {
}

export interface MsgCreateTheorem {
  title: string;
  description: string;
  code: string;
  initialGrant: Coin[];
  proposer: string;
}

export interface MsgCreateTheoremResponse {
  theoremId: string;
}

export interface MsgGrant {
  /** theorem_id defines the unique id of the theorem. */
  theoremId: string;
  grantor: string;
  amount: Coin[];
}

export interface MsgGrantResponse {
}

export interface MsgSubmitProofHash {
  theoremId: string;
  prover: string;
  proofHash: string;
  deposit: Coin[];
}

export interface MsgSubmitProofHashResponse {
}

export interface MsgSubmitProofDetail {
  proofId: string;
  prover: string;
  detail: string;
}

export interface MsgSubmitProofDetailResponse {
}

function createBaseMsgCreateProgram(): MsgCreateProgram {
  return { programId: "", name: "", detail: "", operatorAddress: "" };
}

export const MsgCreateProgram = {
  encode(message: MsgCreateProgram, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(34).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateProgram {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProgram {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgCreateProgram): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProgram>, I>>(base?: I): MsgCreateProgram {
    return MsgCreateProgram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProgram>, I>>(object: I): MsgCreateProgram {
    const message = createBaseMsgCreateProgram();
    message.programId = object.programId ?? "";
    message.name = object.name ?? "";
    message.detail = object.detail ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgEditProgram(): MsgEditProgram {
  return { programId: "", name: "", detail: "", operatorAddress: "" };
}

export const MsgEditProgram = {
  encode(message: MsgEditProgram, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(34).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditProgram {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgEditProgram {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgEditProgram): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEditProgram>, I>>(base?: I): MsgEditProgram {
    return MsgEditProgram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEditProgram>, I>>(object: I): MsgEditProgram {
    const message = createBaseMsgEditProgram();
    message.programId = object.programId ?? "";
    message.name = object.name ?? "";
    message.detail = object.detail ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgCreateProgramResponse(): MsgCreateProgramResponse {
  return {};
}

export const MsgCreateProgramResponse = {
  encode(_: MsgCreateProgramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateProgramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProgramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProgramResponse {
    return {};
  },

  toJSON(_: MsgCreateProgramResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateProgramResponse>, I>>(base?: I): MsgCreateProgramResponse {
    return MsgCreateProgramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateProgramResponse>, I>>(_: I): MsgCreateProgramResponse {
    const message = createBaseMsgCreateProgramResponse();
    return message;
  },
};

function createBaseMsgEditProgramResponse(): MsgEditProgramResponse {
  return {};
}

export const MsgEditProgramResponse = {
  encode(_: MsgEditProgramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditProgramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditProgramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgEditProgramResponse {
    return {};
  },

  toJSON(_: MsgEditProgramResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEditProgramResponse>, I>>(base?: I): MsgEditProgramResponse {
    return MsgEditProgramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEditProgramResponse>, I>>(_: I): MsgEditProgramResponse {
    const message = createBaseMsgEditProgramResponse();
    return message;
  },
};

function createBaseMsgActivateProgram(): MsgActivateProgram {
  return { programId: "", operatorAddress: "" };
}

export const MsgActivateProgram = {
  encode(message: MsgActivateProgram, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateProgram {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgActivateProgram {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgActivateProgram): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgActivateProgram>, I>>(base?: I): MsgActivateProgram {
    return MsgActivateProgram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgActivateProgram>, I>>(object: I): MsgActivateProgram {
    const message = createBaseMsgActivateProgram();
    message.programId = object.programId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgActivateProgramResponse(): MsgActivateProgramResponse {
  return {};
}

export const MsgActivateProgramResponse = {
  encode(_: MsgActivateProgramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateProgramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateProgramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgActivateProgramResponse {
    return {};
  },

  toJSON(_: MsgActivateProgramResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgActivateProgramResponse>, I>>(base?: I): MsgActivateProgramResponse {
    return MsgActivateProgramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgActivateProgramResponse>, I>>(_: I): MsgActivateProgramResponse {
    const message = createBaseMsgActivateProgramResponse();
    return message;
  },
};

function createBaseMsgCloseProgram(): MsgCloseProgram {
  return { programId: "", operatorAddress: "" };
}

export const MsgCloseProgram = {
  encode(message: MsgCloseProgram, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseProgram {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseProgram {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgCloseProgram): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseProgram>, I>>(base?: I): MsgCloseProgram {
    return MsgCloseProgram.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseProgram>, I>>(object: I): MsgCloseProgram {
    const message = createBaseMsgCloseProgram();
    message.programId = object.programId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgCloseProgramResponse(): MsgCloseProgramResponse {
  return {};
}

export const MsgCloseProgramResponse = {
  encode(_: MsgCloseProgramResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseProgramResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseProgramResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseProgramResponse {
    return {};
  },

  toJSON(_: MsgCloseProgramResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseProgramResponse>, I>>(base?: I): MsgCloseProgramResponse {
    return MsgCloseProgramResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseProgramResponse>, I>>(_: I): MsgCloseProgramResponse {
    const message = createBaseMsgCloseProgramResponse();
    return message;
  },
};

function createBaseMsgSubmitFinding(): MsgSubmitFinding {
  return { programId: "", findingId: "", findingHash: "", operatorAddress: "", severityLevel: 0 };
}

export const MsgSubmitFinding = {
  encode(message: MsgSubmitFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.findingId !== "") {
      writer.uint32(18).string(message.findingId);
    }
    if (message.findingHash !== "") {
      writer.uint32(26).string(message.findingHash);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(34).string(message.operatorAddress);
    }
    if (message.severityLevel !== 0) {
      writer.uint32(40).int32(message.severityLevel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.findingHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severityLevel = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitFinding {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      findingHash: isSet(object.findingHash) ? globalThis.String(object.findingHash) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      severityLevel: isSet(object.severityLevel) ? severityLevelFromJSON(object.severityLevel) : 0,
    };
  },

  toJSON(message: MsgSubmitFinding): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.findingHash !== "") {
      obj.findingHash = message.findingHash;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.severityLevel !== 0) {
      obj.severityLevel = severityLevelToJSON(message.severityLevel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitFinding>, I>>(base?: I): MsgSubmitFinding {
    return MsgSubmitFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitFinding>, I>>(object: I): MsgSubmitFinding {
    const message = createBaseMsgSubmitFinding();
    message.programId = object.programId ?? "";
    message.findingId = object.findingId ?? "";
    message.findingHash = object.findingHash ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    message.severityLevel = object.severityLevel ?? 0;
    return message;
  },
};

function createBaseMsgSubmitFindingResponse(): MsgSubmitFindingResponse {
  return {};
}

export const MsgSubmitFindingResponse = {
  encode(_: MsgSubmitFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitFindingResponse {
    return {};
  },

  toJSON(_: MsgSubmitFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitFindingResponse>, I>>(base?: I): MsgSubmitFindingResponse {
    return MsgSubmitFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitFindingResponse>, I>>(_: I): MsgSubmitFindingResponse {
    const message = createBaseMsgSubmitFindingResponse();
    return message;
  },
};

function createBaseMsgEditFinding(): MsgEditFinding {
  return { findingId: "", findingHash: "", operatorAddress: "", severityLevel: 0, paymentHash: "" };
}

export const MsgEditFinding = {
  encode(message: MsgEditFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.findingHash !== "") {
      writer.uint32(18).string(message.findingHash);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(26).string(message.operatorAddress);
    }
    if (message.severityLevel !== 0) {
      writer.uint32(32).int32(message.severityLevel);
    }
    if (message.paymentHash !== "") {
      writer.uint32(42).string(message.paymentHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingHash = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.severityLevel = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.paymentHash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgEditFinding {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      findingHash: isSet(object.findingHash) ? globalThis.String(object.findingHash) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      severityLevel: isSet(object.severityLevel) ? severityLevelFromJSON(object.severityLevel) : 0,
      paymentHash: isSet(object.paymentHash) ? globalThis.String(object.paymentHash) : "",
    };
  },

  toJSON(message: MsgEditFinding): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.findingHash !== "") {
      obj.findingHash = message.findingHash;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.severityLevel !== 0) {
      obj.severityLevel = severityLevelToJSON(message.severityLevel);
    }
    if (message.paymentHash !== "") {
      obj.paymentHash = message.paymentHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEditFinding>, I>>(base?: I): MsgEditFinding {
    return MsgEditFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEditFinding>, I>>(object: I): MsgEditFinding {
    const message = createBaseMsgEditFinding();
    message.findingId = object.findingId ?? "";
    message.findingHash = object.findingHash ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    message.severityLevel = object.severityLevel ?? 0;
    message.paymentHash = object.paymentHash ?? "";
    return message;
  },
};

function createBaseMsgEditFindingResponse(): MsgEditFindingResponse {
  return {};
}

export const MsgEditFindingResponse = {
  encode(_: MsgEditFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgEditFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgEditFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgEditFindingResponse {
    return {};
  },

  toJSON(_: MsgEditFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgEditFindingResponse>, I>>(base?: I): MsgEditFindingResponse {
    return MsgEditFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgEditFindingResponse>, I>>(_: I): MsgEditFindingResponse {
    const message = createBaseMsgEditFindingResponse();
    return message;
  },
};

function createBaseMsgConfirmFinding(): MsgConfirmFinding {
  return { findingId: "", operatorAddress: "", fingerprint: "" };
}

export const MsgConfirmFinding = {
  encode(message: MsgConfirmFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    if (message.fingerprint !== "") {
      writer.uint32(26).string(message.fingerprint);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConfirmFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fingerprint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConfirmFinding {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
      fingerprint: isSet(object.fingerprint) ? globalThis.String(object.fingerprint) : "",
    };
  },

  toJSON(message: MsgConfirmFinding): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    if (message.fingerprint !== "") {
      obj.fingerprint = message.fingerprint;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConfirmFinding>, I>>(base?: I): MsgConfirmFinding {
    return MsgConfirmFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConfirmFinding>, I>>(object: I): MsgConfirmFinding {
    const message = createBaseMsgConfirmFinding();
    message.findingId = object.findingId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    message.fingerprint = object.fingerprint ?? "";
    return message;
  },
};

function createBaseMsgConfirmFindingResponse(): MsgConfirmFindingResponse {
  return {};
}

export const MsgConfirmFindingResponse = {
  encode(_: MsgConfirmFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConfirmFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConfirmFindingResponse {
    return {};
  },

  toJSON(_: MsgConfirmFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConfirmFindingResponse>, I>>(base?: I): MsgConfirmFindingResponse {
    return MsgConfirmFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConfirmFindingResponse>, I>>(_: I): MsgConfirmFindingResponse {
    const message = createBaseMsgConfirmFindingResponse();
    return message;
  },
};

function createBaseMsgActivateFinding(): MsgActivateFinding {
  return { findingId: "", operatorAddress: "" };
}

export const MsgActivateFinding = {
  encode(message: MsgActivateFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgActivateFinding {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgActivateFinding): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgActivateFinding>, I>>(base?: I): MsgActivateFinding {
    return MsgActivateFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgActivateFinding>, I>>(object: I): MsgActivateFinding {
    const message = createBaseMsgActivateFinding();
    message.findingId = object.findingId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgActivateFindingResponse(): MsgActivateFindingResponse {
  return {};
}

export const MsgActivateFindingResponse = {
  encode(_: MsgActivateFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgActivateFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgActivateFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgActivateFindingResponse {
    return {};
  },

  toJSON(_: MsgActivateFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgActivateFindingResponse>, I>>(base?: I): MsgActivateFindingResponse {
    return MsgActivateFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgActivateFindingResponse>, I>>(_: I): MsgActivateFindingResponse {
    const message = createBaseMsgActivateFindingResponse();
    return message;
  },
};

function createBaseMsgConfirmFindingPaid(): MsgConfirmFindingPaid {
  return { findingId: "", operatorAddress: "" };
}

export const MsgConfirmFindingPaid = {
  encode(message: MsgConfirmFindingPaid, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmFindingPaid {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConfirmFindingPaid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConfirmFindingPaid {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgConfirmFindingPaid): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConfirmFindingPaid>, I>>(base?: I): MsgConfirmFindingPaid {
    return MsgConfirmFindingPaid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConfirmFindingPaid>, I>>(object: I): MsgConfirmFindingPaid {
    const message = createBaseMsgConfirmFindingPaid();
    message.findingId = object.findingId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgConfirmFindingPaidResponse(): MsgConfirmFindingPaidResponse {
  return {};
}

export const MsgConfirmFindingPaidResponse = {
  encode(_: MsgConfirmFindingPaidResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConfirmFindingPaidResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConfirmFindingPaidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConfirmFindingPaidResponse {
    return {};
  },

  toJSON(_: MsgConfirmFindingPaidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConfirmFindingPaidResponse>, I>>(base?: I): MsgConfirmFindingPaidResponse {
    return MsgConfirmFindingPaidResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConfirmFindingPaidResponse>, I>>(_: I): MsgConfirmFindingPaidResponse {
    const message = createBaseMsgConfirmFindingPaidResponse();
    return message;
  },
};

function createBaseMsgCloseFinding(): MsgCloseFinding {
  return { findingId: "", operatorAddress: "" };
}

export const MsgCloseFinding = {
  encode(message: MsgCloseFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(18).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseFinding {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgCloseFinding): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseFinding>, I>>(base?: I): MsgCloseFinding {
    return MsgCloseFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseFinding>, I>>(object: I): MsgCloseFinding {
    const message = createBaseMsgCloseFinding();
    message.findingId = object.findingId ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgCloseFindingResponse(): MsgCloseFindingResponse {
  return {};
}

export const MsgCloseFindingResponse = {
  encode(_: MsgCloseFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseFindingResponse {
    return {};
  },

  toJSON(_: MsgCloseFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCloseFindingResponse>, I>>(base?: I): MsgCloseFindingResponse {
    return MsgCloseFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCloseFindingResponse>, I>>(_: I): MsgCloseFindingResponse {
    const message = createBaseMsgCloseFindingResponse();
    return message;
  },
};

function createBaseMsgPublishFinding(): MsgPublishFinding {
  return { findingId: "", title: "", detail: "", description: "", proofOfConcept: "", operatorAddress: "" };
}

export const MsgPublishFinding = {
  encode(message: MsgPublishFinding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.findingId !== "") {
      writer.uint32(10).string(message.findingId);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.proofOfConcept !== "") {
      writer.uint32(42).string(message.proofOfConcept);
    }
    if (message.operatorAddress !== "") {
      writer.uint32(50).string(message.operatorAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishFinding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proofOfConcept = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.operatorAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPublishFinding {
    return {
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      proofOfConcept: isSet(object.proofOfConcept) ? globalThis.String(object.proofOfConcept) : "",
      operatorAddress: isSet(object.operatorAddress) ? globalThis.String(object.operatorAddress) : "",
    };
  },

  toJSON(message: MsgPublishFinding): unknown {
    const obj: any = {};
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.proofOfConcept !== "") {
      obj.proofOfConcept = message.proofOfConcept;
    }
    if (message.operatorAddress !== "") {
      obj.operatorAddress = message.operatorAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishFinding>, I>>(base?: I): MsgPublishFinding {
    return MsgPublishFinding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishFinding>, I>>(object: I): MsgPublishFinding {
    const message = createBaseMsgPublishFinding();
    message.findingId = object.findingId ?? "";
    message.title = object.title ?? "";
    message.detail = object.detail ?? "";
    message.description = object.description ?? "";
    message.proofOfConcept = object.proofOfConcept ?? "";
    message.operatorAddress = object.operatorAddress ?? "";
    return message;
  },
};

function createBaseMsgPublishFindingResponse(): MsgPublishFindingResponse {
  return {};
}

export const MsgPublishFindingResponse = {
  encode(_: MsgPublishFindingResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgPublishFindingResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPublishFindingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPublishFindingResponse {
    return {};
  },

  toJSON(_: MsgPublishFindingResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPublishFindingResponse>, I>>(base?: I): MsgPublishFindingResponse {
    return MsgPublishFindingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPublishFindingResponse>, I>>(_: I): MsgPublishFindingResponse {
    const message = createBaseMsgPublishFindingResponse();
    return message;
  },
};

function createBaseMsgCreateTheorem(): MsgCreateTheorem {
  return { title: "", description: "", code: "", initialGrant: [], proposer: "" };
}

export const MsgCreateTheorem = {
  encode(message: MsgCreateTheorem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    for (const v of message.initialGrant) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.proposer !== "") {
      writer.uint32(42).string(message.proposer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTheorem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTheorem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.initialGrant.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proposer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTheorem {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      initialGrant: globalThis.Array.isArray(object?.initialGrant)
        ? object.initialGrant.map((e: any) => Coin.fromJSON(e))
        : [],
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
    };
  },

  toJSON(message: MsgCreateTheorem): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.initialGrant?.length) {
      obj.initialGrant = message.initialGrant.map((e) => Coin.toJSON(e));
    }
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTheorem>, I>>(base?: I): MsgCreateTheorem {
    return MsgCreateTheorem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTheorem>, I>>(object: I): MsgCreateTheorem {
    const message = createBaseMsgCreateTheorem();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? "";
    message.initialGrant = object.initialGrant?.map((e) => Coin.fromPartial(e)) || [];
    message.proposer = object.proposer ?? "";
    return message;
  },
};

function createBaseMsgCreateTheoremResponse(): MsgCreateTheoremResponse {
  return { theoremId: "0" };
}

export const MsgCreateTheoremResponse = {
  encode(message: MsgCreateTheoremResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateTheoremResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateTheoremResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateTheoremResponse {
    return { theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0" };
  },

  toJSON(message: MsgCreateTheoremResponse): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateTheoremResponse>, I>>(base?: I): MsgCreateTheoremResponse {
    return MsgCreateTheoremResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateTheoremResponse>, I>>(object: I): MsgCreateTheoremResponse {
    const message = createBaseMsgCreateTheoremResponse();
    message.theoremId = object.theoremId ?? "0";
    return message;
  },
};

function createBaseMsgGrant(): MsgGrant {
  return { theoremId: "0", grantor: "", amount: [] };
}

export const MsgGrant = {
  encode(message: MsgGrant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    if (message.grantor !== "") {
      writer.uint32(18).string(message.grantor);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgGrant {
    return {
      theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0",
      grantor: isSet(object.grantor) ? globalThis.String(object.grantor) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgGrant): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    if (message.grantor !== "") {
      obj.grantor = message.grantor;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgGrant>, I>>(base?: I): MsgGrant {
    return MsgGrant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgGrant>, I>>(object: I): MsgGrant {
    const message = createBaseMsgGrant();
    message.theoremId = object.theoremId ?? "0";
    message.grantor = object.grantor ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgGrantResponse(): MsgGrantResponse {
  return {};
}

export const MsgGrantResponse = {
  encode(_: MsgGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgGrantResponse {
    return {};
  },

  toJSON(_: MsgGrantResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgGrantResponse>, I>>(base?: I): MsgGrantResponse {
    return MsgGrantResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgGrantResponse>, I>>(_: I): MsgGrantResponse {
    const message = createBaseMsgGrantResponse();
    return message;
  },
};

function createBaseMsgSubmitProofHash(): MsgSubmitProofHash {
  return { theoremId: "0", prover: "", proofHash: "", deposit: [] };
}

export const MsgSubmitProofHash = {
  encode(message: MsgSubmitProofHash, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    if (message.prover !== "") {
      writer.uint32(18).string(message.prover);
    }
    if (message.proofHash !== "") {
      writer.uint32(26).string(message.proofHash);
    }
    for (const v of message.deposit) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitProofHash {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProofHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.prover = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.proofHash = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitProofHash {
    return {
      theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0",
      prover: isSet(object.prover) ? globalThis.String(object.prover) : "",
      proofHash: isSet(object.proofHash) ? globalThis.String(object.proofHash) : "",
      deposit: globalThis.Array.isArray(object?.deposit) ? object.deposit.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgSubmitProofHash): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    if (message.prover !== "") {
      obj.prover = message.prover;
    }
    if (message.proofHash !== "") {
      obj.proofHash = message.proofHash;
    }
    if (message.deposit?.length) {
      obj.deposit = message.deposit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitProofHash>, I>>(base?: I): MsgSubmitProofHash {
    return MsgSubmitProofHash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitProofHash>, I>>(object: I): MsgSubmitProofHash {
    const message = createBaseMsgSubmitProofHash();
    message.theoremId = object.theoremId ?? "0";
    message.prover = object.prover ?? "";
    message.proofHash = object.proofHash ?? "";
    message.deposit = object.deposit?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgSubmitProofHashResponse(): MsgSubmitProofHashResponse {
  return {};
}

export const MsgSubmitProofHashResponse = {
  encode(_: MsgSubmitProofHashResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitProofHashResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProofHashResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitProofHashResponse {
    return {};
  },

  toJSON(_: MsgSubmitProofHashResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitProofHashResponse>, I>>(base?: I): MsgSubmitProofHashResponse {
    return MsgSubmitProofHashResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitProofHashResponse>, I>>(_: I): MsgSubmitProofHashResponse {
    const message = createBaseMsgSubmitProofHashResponse();
    return message;
  },
};

function createBaseMsgSubmitProofDetail(): MsgSubmitProofDetail {
  return { proofId: "", prover: "", detail: "" };
}

export const MsgSubmitProofDetail = {
  encode(message: MsgSubmitProofDetail, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.proofId !== "") {
      writer.uint32(10).string(message.proofId);
    }
    if (message.prover !== "") {
      writer.uint32(18).string(message.prover);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitProofDetail {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProofDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.proofId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.prover = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitProofDetail {
    return {
      proofId: isSet(object.proofId) ? globalThis.String(object.proofId) : "",
      prover: isSet(object.prover) ? globalThis.String(object.prover) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
    };
  },

  toJSON(message: MsgSubmitProofDetail): unknown {
    const obj: any = {};
    if (message.proofId !== "") {
      obj.proofId = message.proofId;
    }
    if (message.prover !== "") {
      obj.prover = message.prover;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitProofDetail>, I>>(base?: I): MsgSubmitProofDetail {
    return MsgSubmitProofDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitProofDetail>, I>>(object: I): MsgSubmitProofDetail {
    const message = createBaseMsgSubmitProofDetail();
    message.proofId = object.proofId ?? "";
    message.prover = object.prover ?? "";
    message.detail = object.detail ?? "";
    return message;
  },
};

function createBaseMsgSubmitProofDetailResponse(): MsgSubmitProofDetailResponse {
  return {};
}

export const MsgSubmitProofDetailResponse = {
  encode(_: MsgSubmitProofDetailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSubmitProofDetailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProofDetailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSubmitProofDetailResponse {
    return {};
  },

  toJSON(_: MsgSubmitProofDetailResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSubmitProofDetailResponse>, I>>(base?: I): MsgSubmitProofDetailResponse {
    return MsgSubmitProofDetailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSubmitProofDetailResponse>, I>>(_: I): MsgSubmitProofDetailResponse {
    const message = createBaseMsgSubmitProofDetailResponse();
    return message;
  },
};

/** Msg defines the staking Msg service. */
export interface Msg {
  /** CreateProgram defines a method for creating a new program. */
  CreateProgram(request: MsgCreateProgram): Promise<MsgCreateProgramResponse>;
  /** EditProgram defines a method for modifying a program. */
  EditProgram(request: MsgEditProgram): Promise<MsgEditProgramResponse>;
  /** Activate a program status by program_id */
  ActivateProgram(request: MsgActivateProgram): Promise<MsgActivateProgramResponse>;
  /** Closed a program status by program_id */
  CloseProgram(request: MsgCloseProgram): Promise<MsgCloseProgramResponse>;
  /** SubmitFinding defines a method for submitting a new finding. */
  SubmitFinding(request: MsgSubmitFinding): Promise<MsgSubmitFindingResponse>;
  /** EditFinding defines a method for editing a new finding. */
  EditFinding(request: MsgEditFinding): Promise<MsgEditFindingResponse>;
  /** ActivateFinding defines a method for activate a new finding. */
  ActivateFinding(request: MsgActivateFinding): Promise<MsgActivateFindingResponse>;
  /** ConfirmFinding defines a method for host confirm a finding. */
  ConfirmFinding(request: MsgConfirmFinding): Promise<MsgConfirmFindingResponse>;
  /** ConfirmFindingPaid defines a method for submitter confirm a finding paid */
  ConfirmFindingPaid(request: MsgConfirmFindingPaid): Promise<MsgConfirmFindingPaidResponse>;
  /** CloseFinding defines a method for submitter or certifier close a finding */
  CloseFinding(request: MsgCloseFinding): Promise<MsgCloseFindingResponse>;
  /** PublishFinding defines a method for publish a finding. */
  PublishFinding(request: MsgPublishFinding): Promise<MsgPublishFindingResponse>;
  /** CreateTheorem defines a method to create new theorem given the messages. */
  CreateTheorem(request: MsgCreateTheorem): Promise<MsgCreateTheoremResponse>;
  /** SubmitProofHash defines a method to submit a proof with hash. */
  SubmitProofHash(request: MsgSubmitProofHash): Promise<MsgSubmitProofHashResponse>;
  /** SubmitProofDetail defines a method to submit a proof with detail. */
  SubmitProofDetail(request: MsgSubmitProofDetail): Promise<MsgSubmitProofHashResponse>;
  /** Grant defines a method to grant theorem given the messages. */
  Grant(request: MsgGrant): Promise<MsgGrantResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
