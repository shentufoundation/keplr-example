// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: shentu/bounty/v1/bounty.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin, DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "shentu.bounty.v1";

export enum ProgramStatus {
  PROGRAM_STATUS_INACTIVE = 0,
  PROGRAM_STATUS_ACTIVE = 1,
  PROGRAM_STATUS_CLOSED = 2,
  UNRECOGNIZED = -1,
}

export function programStatusFromJSON(object: any): ProgramStatus {
  switch (object) {
    case 0:
    case "PROGRAM_STATUS_INACTIVE":
      return ProgramStatus.PROGRAM_STATUS_INACTIVE;
    case 1:
    case "PROGRAM_STATUS_ACTIVE":
      return ProgramStatus.PROGRAM_STATUS_ACTIVE;
    case 2:
    case "PROGRAM_STATUS_CLOSED":
      return ProgramStatus.PROGRAM_STATUS_CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProgramStatus.UNRECOGNIZED;
  }
}

export function programStatusToJSON(object: ProgramStatus): string {
  switch (object) {
    case ProgramStatus.PROGRAM_STATUS_INACTIVE:
      return "PROGRAM_STATUS_INACTIVE";
    case ProgramStatus.PROGRAM_STATUS_ACTIVE:
      return "PROGRAM_STATUS_ACTIVE";
    case ProgramStatus.PROGRAM_STATUS_CLOSED:
      return "PROGRAM_STATUS_CLOSED";
    case ProgramStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SeverityLevel {
  SEVERITY_LEVEL_UNSPECIFIED = 0,
  SEVERITY_LEVEL_CRITICAL = 1,
  SEVERITY_LEVEL_HIGH = 2,
  SEVERITY_LEVEL_MEDIUM = 3,
  SEVERITY_LEVEL_LOW = 4,
  SEVERITY_LEVEL_INFORMATIONAL = 5,
  UNRECOGNIZED = -1,
}

export function severityLevelFromJSON(object: any): SeverityLevel {
  switch (object) {
    case 0:
    case "SEVERITY_LEVEL_UNSPECIFIED":
      return SeverityLevel.SEVERITY_LEVEL_UNSPECIFIED;
    case 1:
    case "SEVERITY_LEVEL_CRITICAL":
      return SeverityLevel.SEVERITY_LEVEL_CRITICAL;
    case 2:
    case "SEVERITY_LEVEL_HIGH":
      return SeverityLevel.SEVERITY_LEVEL_HIGH;
    case 3:
    case "SEVERITY_LEVEL_MEDIUM":
      return SeverityLevel.SEVERITY_LEVEL_MEDIUM;
    case 4:
    case "SEVERITY_LEVEL_LOW":
      return SeverityLevel.SEVERITY_LEVEL_LOW;
    case 5:
    case "SEVERITY_LEVEL_INFORMATIONAL":
      return SeverityLevel.SEVERITY_LEVEL_INFORMATIONAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SeverityLevel.UNRECOGNIZED;
  }
}

export function severityLevelToJSON(object: SeverityLevel): string {
  switch (object) {
    case SeverityLevel.SEVERITY_LEVEL_UNSPECIFIED:
      return "SEVERITY_LEVEL_UNSPECIFIED";
    case SeverityLevel.SEVERITY_LEVEL_CRITICAL:
      return "SEVERITY_LEVEL_CRITICAL";
    case SeverityLevel.SEVERITY_LEVEL_HIGH:
      return "SEVERITY_LEVEL_HIGH";
    case SeverityLevel.SEVERITY_LEVEL_MEDIUM:
      return "SEVERITY_LEVEL_MEDIUM";
    case SeverityLevel.SEVERITY_LEVEL_LOW:
      return "SEVERITY_LEVEL_LOW";
    case SeverityLevel.SEVERITY_LEVEL_INFORMATIONAL:
      return "SEVERITY_LEVEL_INFORMATIONAL";
    case SeverityLevel.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FindingStatus {
  FINDING_STATUS_SUBMITTED = 0,
  FINDING_STATUS_ACTIVE = 1,
  FINDING_STATUS_CONFIRMED = 2,
  FINDING_STATUS_PAID = 3,
  FINDING_STATUS_CLOSED = 4,
  UNRECOGNIZED = -1,
}

export function findingStatusFromJSON(object: any): FindingStatus {
  switch (object) {
    case 0:
    case "FINDING_STATUS_SUBMITTED":
      return FindingStatus.FINDING_STATUS_SUBMITTED;
    case 1:
    case "FINDING_STATUS_ACTIVE":
      return FindingStatus.FINDING_STATUS_ACTIVE;
    case 2:
    case "FINDING_STATUS_CONFIRMED":
      return FindingStatus.FINDING_STATUS_CONFIRMED;
    case 3:
    case "FINDING_STATUS_PAID":
      return FindingStatus.FINDING_STATUS_PAID;
    case 4:
    case "FINDING_STATUS_CLOSED":
      return FindingStatus.FINDING_STATUS_CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FindingStatus.UNRECOGNIZED;
  }
}

export function findingStatusToJSON(object: FindingStatus): string {
  switch (object) {
    case FindingStatus.FINDING_STATUS_SUBMITTED:
      return "FINDING_STATUS_SUBMITTED";
    case FindingStatus.FINDING_STATUS_ACTIVE:
      return "FINDING_STATUS_ACTIVE";
    case FindingStatus.FINDING_STATUS_CONFIRMED:
      return "FINDING_STATUS_CONFIRMED";
    case FindingStatus.FINDING_STATUS_PAID:
      return "FINDING_STATUS_PAID";
    case FindingStatus.FINDING_STATUS_CLOSED:
      return "FINDING_STATUS_CLOSED";
    case FindingStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TheoremStatus {
  /** THEOREM_STATUS_UNSPECIFIED - default theorem status. */
  THEOREM_STATUS_UNSPECIFIED = 0,
  /** THEOREM_STATUS_PROOF_PERIOD - theorem status during the proof period. */
  THEOREM_STATUS_PROOF_PERIOD = 1,
  /** THEOREM_STATUS_PASSED - theorem that has passed. */
  THEOREM_STATUS_PASSED = 2,
  /** THEOREM_STATUS_CLOSED - theorem that has closed. */
  THEOREM_STATUS_CLOSED = 3,
  UNRECOGNIZED = -1,
}

export function theoremStatusFromJSON(object: any): TheoremStatus {
  switch (object) {
    case 0:
    case "THEOREM_STATUS_UNSPECIFIED":
      return TheoremStatus.THEOREM_STATUS_UNSPECIFIED;
    case 1:
    case "THEOREM_STATUS_PROOF_PERIOD":
      return TheoremStatus.THEOREM_STATUS_PROOF_PERIOD;
    case 2:
    case "THEOREM_STATUS_PASSED":
      return TheoremStatus.THEOREM_STATUS_PASSED;
    case 3:
    case "THEOREM_STATUS_CLOSED":
      return TheoremStatus.THEOREM_STATUS_CLOSED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TheoremStatus.UNRECOGNIZED;
  }
}

export function theoremStatusToJSON(object: TheoremStatus): string {
  switch (object) {
    case TheoremStatus.THEOREM_STATUS_UNSPECIFIED:
      return "THEOREM_STATUS_UNSPECIFIED";
    case TheoremStatus.THEOREM_STATUS_PROOF_PERIOD:
      return "THEOREM_STATUS_PROOF_PERIOD";
    case TheoremStatus.THEOREM_STATUS_PASSED:
      return "THEOREM_STATUS_PASSED";
    case TheoremStatus.THEOREM_STATUS_CLOSED:
      return "THEOREM_STATUS_CLOSED";
    case TheoremStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProofStatus {
  /** PROOF_STATUS_UNSPECIFIED - default proof status. */
  PROOF_STATUS_UNSPECIFIED = 0,
  /** PROOF_STATUS_HASH_LOCK_PERIOD - proof status during the creation period. */
  PROOF_STATUS_HASH_LOCK_PERIOD = 1,
  /** PROOF_STATUS_HASH_DETAIL_TIMEOUT - proof status during the upload proof detail period timeout. */
  PROOF_STATUS_HASH_DETAIL_TIMEOUT = 2,
  /** PROOF_STATUS_HASH_DETAIL_PERIOD - proof status during the upload proof detail period. */
  PROOF_STATUS_HASH_DETAIL_PERIOD = 3,
  /** PROOF_STATUS_PASSED - theorem that has passed. */
  PROOF_STATUS_PASSED = 4,
  /** PROOF_STATUS_FAILED - theorem that has failed. */
  PROOF_STATUS_FAILED = 5,
  /** PROOF_STATUS_CHECKER_TIMEOUT - theorem that checker has timeout. */
  PROOF_STATUS_CHECKER_TIMEOUT = 6,
  UNRECOGNIZED = -1,
}

export function proofStatusFromJSON(object: any): ProofStatus {
  switch (object) {
    case 0:
    case "PROOF_STATUS_UNSPECIFIED":
      return ProofStatus.PROOF_STATUS_UNSPECIFIED;
    case 1:
    case "PROOF_STATUS_HASH_LOCK_PERIOD":
      return ProofStatus.PROOF_STATUS_HASH_LOCK_PERIOD;
    case 2:
    case "PROOF_STATUS_HASH_DETAIL_TIMEOUT":
      return ProofStatus.PROOF_STATUS_HASH_DETAIL_TIMEOUT;
    case 3:
    case "PROOF_STATUS_HASH_DETAIL_PERIOD":
      return ProofStatus.PROOF_STATUS_HASH_DETAIL_PERIOD;
    case 4:
    case "PROOF_STATUS_PASSED":
      return ProofStatus.PROOF_STATUS_PASSED;
    case 5:
    case "PROOF_STATUS_FAILED":
      return ProofStatus.PROOF_STATUS_FAILED;
    case 6:
    case "PROOF_STATUS_CHECKER_TIMEOUT":
      return ProofStatus.PROOF_STATUS_CHECKER_TIMEOUT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProofStatus.UNRECOGNIZED;
  }
}

export function proofStatusToJSON(object: ProofStatus): string {
  switch (object) {
    case ProofStatus.PROOF_STATUS_UNSPECIFIED:
      return "PROOF_STATUS_UNSPECIFIED";
    case ProofStatus.PROOF_STATUS_HASH_LOCK_PERIOD:
      return "PROOF_STATUS_HASH_LOCK_PERIOD";
    case ProofStatus.PROOF_STATUS_HASH_DETAIL_TIMEOUT:
      return "PROOF_STATUS_HASH_DETAIL_TIMEOUT";
    case ProofStatus.PROOF_STATUS_HASH_DETAIL_PERIOD:
      return "PROOF_STATUS_HASH_DETAIL_PERIOD";
    case ProofStatus.PROOF_STATUS_PASSED:
      return "PROOF_STATUS_PASSED";
    case ProofStatus.PROOF_STATUS_FAILED:
      return "PROOF_STATUS_FAILED";
    case ProofStatus.PROOF_STATUS_CHECKER_TIMEOUT:
      return "PROOF_STATUS_CHECKER_TIMEOUT";
    case ProofStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Program {
  programId: string;
  name: string;
  /** JSON by ProgramDetail */
  detail: string;
  adminAddress: string;
  status: ProgramStatus;
  createTime: Date | undefined;
}

export interface Finding {
  programId: string;
  findingId: string;
  title: string;
  description: string;
  proofOfConcept: string;
  /** hash(description + proof_of_concept + submitter) */
  findingHash: string;
  submitterAddress: string;
  severityLevel: SeverityLevel;
  status: FindingStatus;
  /** JSON by FindingDetail */
  detail: string;
  paymentHash: string;
  createTime: Date | undefined;
}

export interface ProgramFingerprint {
  programId: string;
  name: string;
  /** JSON by ProgramDetail */
  detail: string;
  adminAddress: string;
  status: ProgramStatus;
}

export interface FindingFingerprint {
  programId: string;
  findingId: string;
  title: string;
  /** hash(description + proof_of_concept + submitter) */
  findingHash: string;
  severityLevel: SeverityLevel;
  status: FindingStatus;
  /** JSON by FindingDetail */
  detail: string;
  paymentHash: string;
}

/** Theorem defines the core field members of an openmath theorem. */
export interface Theorem {
  /** id defines the unique id of the theorem. */
  id: string;
  /** title is the title of the theorem */
  title: string;
  /** description is the description of the theorem */
  description: string;
  /** code is a summary of the theorem */
  code: string;
  proofId: string;
  /** status defines the theorem status. */
  status: TheoremStatus;
  /** submit_time is the time of theorem submission. */
  submitTime: Date | undefined;
  endTime:
    | Date
    | undefined;
  /** total_deposit is the total grant on the theorem. */
  totalGrant: Coin[];
  /** proposer is the address of the theorem submitter */
  proposer: string;
}

export interface Proof {
  theoremId: string;
  /** id defines the unique id of the proof. */
  id: string;
  /** detail is the proof data attached to the theorem stored in ipfs */
  detail: string;
  /** status defines the theorem status. */
  status: ProofStatus;
  /** submit_time is the time of proof submission. */
  submitTime:
    | Date
    | undefined;
  /** end_time is the time of proof timeout. */
  endTime:
    | Date
    | undefined;
  /** prover is the address of the proof submitter */
  prover: string;
  /**  */
  Deposit: Coin[];
}

export interface ProofHash {
  theoremId: string;
  detail: string;
  prover: string;
}

/** Grant defines an amount granted by a grantor to an active theorem. */
export interface Grant {
  /** theorem_id defines the unique id of the theorem. */
  theoremId: string;
  /** grantor defines the grant addresses. */
  grantor: string;
  /** amount to be deposited by the grantor. */
  amount: Coin[];
}

/** Deposit defines an amount granted by a grantor to an active theorem. */
export interface Deposit {
  /** theorem_id defines the unique id of the theorem. */
  proofId: string;
  /** depositor defines the deposit addresses. */
  depositor: string;
  /** amount to be deposited by the depositor. */
  amount: Coin[];
}

export interface Params {
  /** Minimum grant for a theorem to enter the proof period. */
  minGrant: Coin[];
  /** Minimum deposit for a proof to enter the proof_hash_lock period. */
  minDeposit: Coin[];
  /** Duration of the theorem proof period. Initial value: 2 weeks. */
  theoremMaxProofPeriod:
    | Duration
    | undefined;
  /** Duration of the proof max lock period. 10min */
  proofMaxLockPeriod:
    | Duration
    | undefined;
  /** rate is the checker rate charged to theorem */
  checkerRate: string;
}

export interface Reward {
  address: string;
  reward: DecCoin[];
}

function createBaseProgram(): Program {
  return { programId: "", name: "", detail: "", adminAddress: "", status: 0, createTime: undefined };
}

export const Program = {
  encode(message: Program, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.adminAddress !== "") {
      writer.uint32(34).string(message.adminAddress);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Program {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProgram();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adminAddress = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Program {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      adminAddress: isSet(object.adminAddress) ? globalThis.String(object.adminAddress) : "",
      status: isSet(object.status) ? programStatusFromJSON(object.status) : 0,
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: Program): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.adminAddress !== "") {
      obj.adminAddress = message.adminAddress;
    }
    if (message.status !== 0) {
      obj.status = programStatusToJSON(message.status);
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Program>, I>>(base?: I): Program {
    return Program.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Program>, I>>(object: I): Program {
    const message = createBaseProgram();
    message.programId = object.programId ?? "";
    message.name = object.name ?? "";
    message.detail = object.detail ?? "";
    message.adminAddress = object.adminAddress ?? "";
    message.status = object.status ?? 0;
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseFinding(): Finding {
  return {
    programId: "",
    findingId: "",
    title: "",
    description: "",
    proofOfConcept: "",
    findingHash: "",
    submitterAddress: "",
    severityLevel: 0,
    status: 0,
    detail: "",
    paymentHash: "",
    createTime: undefined,
  };
}

export const Finding = {
  encode(message: Finding, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.findingId !== "") {
      writer.uint32(18).string(message.findingId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.proofOfConcept !== "") {
      writer.uint32(42).string(message.proofOfConcept);
    }
    if (message.findingHash !== "") {
      writer.uint32(50).string(message.findingHash);
    }
    if (message.submitterAddress !== "") {
      writer.uint32(58).string(message.submitterAddress);
    }
    if (message.severityLevel !== 0) {
      writer.uint32(64).int32(message.severityLevel);
    }
    if (message.status !== 0) {
      writer.uint32(72).int32(message.status);
    }
    if (message.detail !== "") {
      writer.uint32(82).string(message.detail);
    }
    if (message.paymentHash !== "") {
      writer.uint32(90).string(message.paymentHash);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Finding {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proofOfConcept = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.findingHash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.submitterAddress = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.severityLevel = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.paymentHash = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Finding {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      proofOfConcept: isSet(object.proofOfConcept) ? globalThis.String(object.proofOfConcept) : "",
      findingHash: isSet(object.findingHash) ? globalThis.String(object.findingHash) : "",
      submitterAddress: isSet(object.submitterAddress) ? globalThis.String(object.submitterAddress) : "",
      severityLevel: isSet(object.severityLevel) ? severityLevelFromJSON(object.severityLevel) : 0,
      status: isSet(object.status) ? findingStatusFromJSON(object.status) : 0,
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      paymentHash: isSet(object.paymentHash) ? globalThis.String(object.paymentHash) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
    };
  },

  toJSON(message: Finding): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.proofOfConcept !== "") {
      obj.proofOfConcept = message.proofOfConcept;
    }
    if (message.findingHash !== "") {
      obj.findingHash = message.findingHash;
    }
    if (message.submitterAddress !== "") {
      obj.submitterAddress = message.submitterAddress;
    }
    if (message.severityLevel !== 0) {
      obj.severityLevel = severityLevelToJSON(message.severityLevel);
    }
    if (message.status !== 0) {
      obj.status = findingStatusToJSON(message.status);
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.paymentHash !== "") {
      obj.paymentHash = message.paymentHash;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Finding>, I>>(base?: I): Finding {
    return Finding.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Finding>, I>>(object: I): Finding {
    const message = createBaseFinding();
    message.programId = object.programId ?? "";
    message.findingId = object.findingId ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.proofOfConcept = object.proofOfConcept ?? "";
    message.findingHash = object.findingHash ?? "";
    message.submitterAddress = object.submitterAddress ?? "";
    message.severityLevel = object.severityLevel ?? 0;
    message.status = object.status ?? 0;
    message.detail = object.detail ?? "";
    message.paymentHash = object.paymentHash ?? "";
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseProgramFingerprint(): ProgramFingerprint {
  return { programId: "", name: "", detail: "", adminAddress: "", status: 0 };
}

export const ProgramFingerprint = {
  encode(message: ProgramFingerprint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.adminAddress !== "") {
      writer.uint32(34).string(message.adminAddress);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProgramFingerprint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProgramFingerprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.adminAddress = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProgramFingerprint {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      adminAddress: isSet(object.adminAddress) ? globalThis.String(object.adminAddress) : "",
      status: isSet(object.status) ? programStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: ProgramFingerprint): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.adminAddress !== "") {
      obj.adminAddress = message.adminAddress;
    }
    if (message.status !== 0) {
      obj.status = programStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProgramFingerprint>, I>>(base?: I): ProgramFingerprint {
    return ProgramFingerprint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProgramFingerprint>, I>>(object: I): ProgramFingerprint {
    const message = createBaseProgramFingerprint();
    message.programId = object.programId ?? "";
    message.name = object.name ?? "";
    message.detail = object.detail ?? "";
    message.adminAddress = object.adminAddress ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFindingFingerprint(): FindingFingerprint {
  return {
    programId: "",
    findingId: "",
    title: "",
    findingHash: "",
    severityLevel: 0,
    status: 0,
    detail: "",
    paymentHash: "",
  };
}

export const FindingFingerprint = {
  encode(message: FindingFingerprint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.programId !== "") {
      writer.uint32(10).string(message.programId);
    }
    if (message.findingId !== "") {
      writer.uint32(18).string(message.findingId);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.findingHash !== "") {
      writer.uint32(34).string(message.findingHash);
    }
    if (message.severityLevel !== 0) {
      writer.uint32(40).int32(message.severityLevel);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.detail !== "") {
      writer.uint32(58).string(message.detail);
    }
    if (message.paymentHash !== "") {
      writer.uint32(66).string(message.paymentHash);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FindingFingerprint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindingFingerprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.programId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.findingId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.findingHash = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.severityLevel = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.paymentHash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindingFingerprint {
    return {
      programId: isSet(object.programId) ? globalThis.String(object.programId) : "",
      findingId: isSet(object.findingId) ? globalThis.String(object.findingId) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      findingHash: isSet(object.findingHash) ? globalThis.String(object.findingHash) : "",
      severityLevel: isSet(object.severityLevel) ? severityLevelFromJSON(object.severityLevel) : 0,
      status: isSet(object.status) ? findingStatusFromJSON(object.status) : 0,
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      paymentHash: isSet(object.paymentHash) ? globalThis.String(object.paymentHash) : "",
    };
  },

  toJSON(message: FindingFingerprint): unknown {
    const obj: any = {};
    if (message.programId !== "") {
      obj.programId = message.programId;
    }
    if (message.findingId !== "") {
      obj.findingId = message.findingId;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.findingHash !== "") {
      obj.findingHash = message.findingHash;
    }
    if (message.severityLevel !== 0) {
      obj.severityLevel = severityLevelToJSON(message.severityLevel);
    }
    if (message.status !== 0) {
      obj.status = findingStatusToJSON(message.status);
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.paymentHash !== "") {
      obj.paymentHash = message.paymentHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindingFingerprint>, I>>(base?: I): FindingFingerprint {
    return FindingFingerprint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindingFingerprint>, I>>(object: I): FindingFingerprint {
    const message = createBaseFindingFingerprint();
    message.programId = object.programId ?? "";
    message.findingId = object.findingId ?? "";
    message.title = object.title ?? "";
    message.findingHash = object.findingHash ?? "";
    message.severityLevel = object.severityLevel ?? 0;
    message.status = object.status ?? 0;
    message.detail = object.detail ?? "";
    message.paymentHash = object.paymentHash ?? "";
    return message;
  },
};

function createBaseTheorem(): Theorem {
  return {
    id: "0",
    title: "",
    description: "",
    code: "",
    proofId: "",
    status: 0,
    submitTime: undefined,
    endTime: undefined,
    totalGrant: [],
    proposer: "",
  };
}

export const Theorem = {
  encode(message: Theorem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.code !== "") {
      writer.uint32(34).string(message.code);
    }
    if (message.proofId !== "") {
      writer.uint32(42).string(message.proofId);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.submitTime !== undefined) {
      Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(58).fork()).ldelim();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(66).fork()).ldelim();
    }
    for (const v of message.totalGrant) {
      Coin.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    if (message.proposer !== "") {
      writer.uint32(82).string(message.proposer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Theorem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTheorem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.code = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proofId = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.submitTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.totalGrant.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.proposer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Theorem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      proofId: isSet(object.proofId) ? globalThis.String(object.proofId) : "",
      status: isSet(object.status) ? theoremStatusFromJSON(object.status) : 0,
      submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      totalGrant: globalThis.Array.isArray(object?.totalGrant)
        ? object.totalGrant.map((e: any) => Coin.fromJSON(e))
        : [],
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
    };
  },

  toJSON(message: Theorem): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.proofId !== "") {
      obj.proofId = message.proofId;
    }
    if (message.status !== 0) {
      obj.status = theoremStatusToJSON(message.status);
    }
    if (message.submitTime !== undefined) {
      obj.submitTime = message.submitTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.totalGrant?.length) {
      obj.totalGrant = message.totalGrant.map((e) => Coin.toJSON(e));
    }
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Theorem>, I>>(base?: I): Theorem {
    return Theorem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Theorem>, I>>(object: I): Theorem {
    const message = createBaseTheorem();
    message.id = object.id ?? "0";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.code = object.code ?? "";
    message.proofId = object.proofId ?? "";
    message.status = object.status ?? 0;
    message.submitTime = object.submitTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.totalGrant = object.totalGrant?.map((e) => Coin.fromPartial(e)) || [];
    message.proposer = object.proposer ?? "";
    return message;
  },
};

function createBaseProof(): Proof {
  return {
    theoremId: "0",
    id: "",
    detail: "",
    status: 0,
    submitTime: undefined,
    endTime: undefined,
    prover: "",
    Deposit: [],
  };
}

export const Proof = {
  encode(message: Proof, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.detail !== "") {
      writer.uint32(26).string(message.detail);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.submitTime !== undefined) {
      Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(42).fork()).ldelim();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(50).fork()).ldelim();
    }
    if (message.prover !== "") {
      writer.uint32(58).string(message.prover);
    }
    for (const v of message.Deposit) {
      Coin.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Proof {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProof();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.submitTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.prover = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.Deposit.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proof {
    return {
      theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      status: isSet(object.status) ? proofStatusFromJSON(object.status) : 0,
      submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      prover: isSet(object.prover) ? globalThis.String(object.prover) : "",
      Deposit: globalThis.Array.isArray(object?.Deposit) ? object.Deposit.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Proof): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.status !== 0) {
      obj.status = proofStatusToJSON(message.status);
    }
    if (message.submitTime !== undefined) {
      obj.submitTime = message.submitTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.prover !== "") {
      obj.prover = message.prover;
    }
    if (message.Deposit?.length) {
      obj.Deposit = message.Deposit.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Proof>, I>>(base?: I): Proof {
    return Proof.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Proof>, I>>(object: I): Proof {
    const message = createBaseProof();
    message.theoremId = object.theoremId ?? "0";
    message.id = object.id ?? "";
    message.detail = object.detail ?? "";
    message.status = object.status ?? 0;
    message.submitTime = object.submitTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.prover = object.prover ?? "";
    message.Deposit = object.Deposit?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProofHash(): ProofHash {
  return { theoremId: "0", detail: "", prover: "" };
}

export const ProofHash = {
  encode(message: ProofHash, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    if (message.detail !== "") {
      writer.uint32(18).string(message.detail);
    }
    if (message.prover !== "") {
      writer.uint32(26).string(message.prover);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProofHash {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProofHash();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.detail = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.prover = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProofHash {
    return {
      theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0",
      detail: isSet(object.detail) ? globalThis.String(object.detail) : "",
      prover: isSet(object.prover) ? globalThis.String(object.prover) : "",
    };
  },

  toJSON(message: ProofHash): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    if (message.detail !== "") {
      obj.detail = message.detail;
    }
    if (message.prover !== "") {
      obj.prover = message.prover;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProofHash>, I>>(base?: I): ProofHash {
    return ProofHash.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProofHash>, I>>(object: I): ProofHash {
    const message = createBaseProofHash();
    message.theoremId = object.theoremId ?? "0";
    message.detail = object.detail ?? "";
    message.prover = object.prover ?? "";
    return message;
  },
};

function createBaseGrant(): Grant {
  return { theoremId: "0", grantor: "", amount: [] };
}

export const Grant = {
  encode(message: Grant, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.theoremId !== "0") {
      writer.uint32(8).uint64(message.theoremId);
    }
    if (message.grantor !== "") {
      writer.uint32(18).string(message.grantor);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Grant {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.theoremId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Grant {
    return {
      theoremId: isSet(object.theoremId) ? globalThis.String(object.theoremId) : "0",
      grantor: isSet(object.grantor) ? globalThis.String(object.grantor) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Grant): unknown {
    const obj: any = {};
    if (message.theoremId !== "0") {
      obj.theoremId = message.theoremId;
    }
    if (message.grantor !== "") {
      obj.grantor = message.grantor;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Grant>, I>>(base?: I): Grant {
    return Grant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Grant>, I>>(object: I): Grant {
    const message = createBaseGrant();
    message.theoremId = object.theoremId ?? "0";
    message.grantor = object.grantor ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeposit(): Deposit {
  return { proofId: "", depositor: "", amount: [] };
}

export const Deposit = {
  encode(message: Deposit, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.proofId !== "") {
      writer.uint32(10).string(message.proofId);
    }
    if (message.depositor !== "") {
      writer.uint32(18).string(message.depositor);
    }
    for (const v of message.amount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Deposit {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.proofId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.depositor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deposit {
    return {
      proofId: isSet(object.proofId) ? globalThis.String(object.proofId) : "",
      depositor: isSet(object.depositor) ? globalThis.String(object.depositor) : "",
      amount: globalThis.Array.isArray(object?.amount) ? object.amount.map((e: any) => Coin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Deposit): unknown {
    const obj: any = {};
    if (message.proofId !== "") {
      obj.proofId = message.proofId;
    }
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if (message.amount?.length) {
      obj.amount = message.amount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Deposit>, I>>(base?: I): Deposit {
    return Deposit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Deposit>, I>>(object: I): Deposit {
    const message = createBaseDeposit();
    message.proofId = object.proofId ?? "";
    message.depositor = object.depositor ?? "";
    message.amount = object.amount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParams(): Params {
  return {
    minGrant: [],
    minDeposit: [],
    theoremMaxProofPeriod: undefined,
    proofMaxLockPeriod: undefined,
    checkerRate: "",
  };
}

export const Params = {
  encode(message: Params, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.minGrant) {
      Coin.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.minDeposit) {
      Coin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.theoremMaxProofPeriod !== undefined) {
      Duration.encode(message.theoremMaxProofPeriod, writer.uint32(26).fork()).ldelim();
    }
    if (message.proofMaxLockPeriod !== undefined) {
      Duration.encode(message.proofMaxLockPeriod, writer.uint32(34).fork()).ldelim();
    }
    if (message.checkerRate !== "") {
      writer.uint32(42).string(message.checkerRate);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Params {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.minGrant.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.minDeposit.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.theoremMaxProofPeriod = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.proofMaxLockPeriod = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.checkerRate = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      minGrant: globalThis.Array.isArray(object?.minGrant) ? object.minGrant.map((e: any) => Coin.fromJSON(e)) : [],
      minDeposit: globalThis.Array.isArray(object?.minDeposit)
        ? object.minDeposit.map((e: any) => Coin.fromJSON(e))
        : [],
      theoremMaxProofPeriod: isSet(object.theoremMaxProofPeriod)
        ? Duration.fromJSON(object.theoremMaxProofPeriod)
        : undefined,
      proofMaxLockPeriod: isSet(object.proofMaxLockPeriod) ? Duration.fromJSON(object.proofMaxLockPeriod) : undefined,
      checkerRate: isSet(object.checkerRate) ? globalThis.String(object.checkerRate) : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.minGrant?.length) {
      obj.minGrant = message.minGrant.map((e) => Coin.toJSON(e));
    }
    if (message.minDeposit?.length) {
      obj.minDeposit = message.minDeposit.map((e) => Coin.toJSON(e));
    }
    if (message.theoremMaxProofPeriod !== undefined) {
      obj.theoremMaxProofPeriod = Duration.toJSON(message.theoremMaxProofPeriod);
    }
    if (message.proofMaxLockPeriod !== undefined) {
      obj.proofMaxLockPeriod = Duration.toJSON(message.proofMaxLockPeriod);
    }
    if (message.checkerRate !== "") {
      obj.checkerRate = message.checkerRate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.minGrant = object.minGrant?.map((e) => Coin.fromPartial(e)) || [];
    message.minDeposit = object.minDeposit?.map((e) => Coin.fromPartial(e)) || [];
    message.theoremMaxProofPeriod =
      (object.theoremMaxProofPeriod !== undefined && object.theoremMaxProofPeriod !== null)
        ? Duration.fromPartial(object.theoremMaxProofPeriod)
        : undefined;
    message.proofMaxLockPeriod = (object.proofMaxLockPeriod !== undefined && object.proofMaxLockPeriod !== null)
      ? Duration.fromPartial(object.proofMaxLockPeriod)
      : undefined;
    message.checkerRate = object.checkerRate ?? "";
    return message;
  },
};

function createBaseReward(): Reward {
  return { address: "", reward: [] };
}

export const Reward = {
  encode(message: Reward, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    for (const v of message.reward) {
      DecCoin.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Reward {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReward();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reward.push(DecCoin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reward {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      reward: globalThis.Array.isArray(object?.reward) ? object.reward.map((e: any) => DecCoin.fromJSON(e)) : [],
    };
  },

  toJSON(message: Reward): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.reward?.length) {
      obj.reward = message.reward.map((e) => DecCoin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reward>, I>>(base?: I): Reward {
    return Reward.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reward>, I>>(object: I): Reward {
    const message = createBaseReward();
    message.address = object.address ?? "";
    message.reward = object.reward?.map((e) => DecCoin.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
