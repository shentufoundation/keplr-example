// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.2
// source: shentu/auth/v1alpha1/tx.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";

export const protobufPackage = "shentu.auth.v1alpha1";

/**
 * MsgUnlock defines a message for unlocking coins from a manual vesting
 * account.
 */
export interface MsgUnlock {
  issuer: string;
  account: string;
  unlockAmount: Coin[];
}

/** MsgUnlockResponse defines the Msg/Unlock response type. */
export interface MsgUnlockResponse {
}

function createBaseMsgUnlock(): MsgUnlock {
  return { issuer: "", account: "", unlockAmount: [] };
}

export const MsgUnlock = {
  encode(message: MsgUnlock, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.account !== "") {
      writer.uint32(18).string(message.account);
    }
    for (const v of message.unlockAmount) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnlock {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnlock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.account = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.unlockAmount.push(Coin.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUnlock {
    return {
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      account: isSet(object.account) ? globalThis.String(object.account) : "",
      unlockAmount: globalThis.Array.isArray(object?.unlockAmount)
        ? object.unlockAmount.map((e: any) => Coin.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgUnlock): unknown {
    const obj: any = {};
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.account !== "") {
      obj.account = message.account;
    }
    if (message.unlockAmount?.length) {
      obj.unlockAmount = message.unlockAmount.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnlock>, I>>(base?: I): MsgUnlock {
    return MsgUnlock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnlock>, I>>(object: I): MsgUnlock {
    const message = createBaseMsgUnlock();
    message.issuer = object.issuer ?? "";
    message.account = object.account ?? "";
    message.unlockAmount = object.unlockAmount?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgUnlockResponse(): MsgUnlockResponse {
  return {};
}

export const MsgUnlockResponse = {
  encode(_: MsgUnlockResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUnlockResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUnlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUnlockResponse {
    return {};
  },

  toJSON(_: MsgUnlockResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUnlockResponse>, I>>(base?: I): MsgUnlockResponse {
    return MsgUnlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUnlockResponse>, I>>(_: I): MsgUnlockResponse {
    const message = createBaseMsgUnlockResponse();
    return message;
  },
};

/** Msg defines the auth Msg service. */
export interface Msg {
  /**
   * Unlock defines a method for unlocking coins from a manual vesting
   * account.
   */
  Unlock(request: MsgUnlock): Promise<MsgUnlockResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
